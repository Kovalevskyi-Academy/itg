options:
  dynamic_substitutions: true
  substitution_option: 'ALLOW_LOOSE'

substitutions:
  # $REPO_NAME means GitHub's repo name. It will be container name
  _IMAGE: 'europe-docker.pkg.dev/prod-rest/api-rest/textify-api'
  _CLUSTER: 'dev-rest-cluster'
  _REGION: 'europe-west4'
  _LATEST_TAG_NAME: 'latest'

availableSecrets:
  secretManager:
    - versionName: projects/366663102857/secrets/pg-dev-db-name/versions/1
      env: 'DBNAME'
    - versionName: projects/366663102857/secrets/pg-dev-pass/versions/1
      env: 'DBPASS'
    - versionName: projects/366663102857/secrets/pg-dev-username/versions/1
      env: 'DBUSERNAME'

steps:
  - name: 'maven:3-eclipse-temurin-17-alpine'
    id: validate-code
    waitFor: [ '-' ]
    entrypoint: 'mvn'
    args: [ 'validate' ]
    dir: 'api'
  - name: 'maven:3-eclipse-temurin-17-alpine'
    id: do-unit-tests
    waitFor: [ '-' ]
    entrypoint: 'mvn'
    args: [ 'test' ]
    dir: 'api'
  - name: 'maven:3-eclipse-temurin-17-alpine'
    id: build-jar
    waitFor: [ 'do-unit-tests' ]
    entrypoint: 'mvn'
    args: [ 'package', '-Dmaven.test.skip=true' ]
    dir: 'api'
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:alpine'
    id: save-jar-to-GCS
    waitFor: [ 'build-jar' ]
    entrypoint: 'gsutil'
    args: [ 'cp', 'target/a*.jar', 'gs://prod-rest_cloudbuild/api-rest/a*.jar' ]
    dir: 'api'

  # Unpack the jar according to the Spring documentation.
  - name: 'maven:3-eclipse-temurin-17-alpine'
    id: unpack-jar
    waitFor: [ 'build-jar' ]
    entrypoint: 'bash'
    args: [ '-c', 'mkdir -p mkdir target/extracted && java -Djarmode=layertools -jar target/*.jar extract --destination target/extracted && echo "jar unpack success"' ]
    dir: 'api'

  # Pull previous our container build & use it in next step
  - name: 'docker:rc-cli'
    id: pull-previous-container
    waitFor: [ '-' ]
    entrypoint: 'sh'
    args: [ '-c', 'docker pull ${_IMAGE}:latest || exit 0' ]
    dir: 'api'

  # Build new container using layers from previous step.
  - name: 'docker:rc-cli'
    id: build-new-container
    waitFor: [ 'unpack-jar', 'pull-previous-container' ]
    args: [ 'build', '--push',
            '-t', '${_IMAGE}:${SHORT_SHA}',
            '-t', '${_IMAGE}:${BRANCH_NAME}',
            '-t', '${_IMAGE}:${_LATEST_TAG_NAME}',
            '--cache-from', '${_IMAGE}:${_LATEST_TAG_NAME}',
            '--build-arg', 'BUILDKIT_INLINE_CACHE=1', # enable cache
            '--progress', 'plain', # Give more build process details
            '-f', 'api.dockerfile',
            '.' ]
    dir: 'api'

  # Push image to artifact registry
  - name: 'docker:rc-cli'
    id: push-to-GCAR
    waitFor: [ 'build-new-container' ]
    args: [ 'push', '--all-tags', '${_IMAGE}' ]
    dir: 'api'

  #   Kubernetes create namespace
  - name: 'gcr.io/cloud-builders/gke-deploy'
    id: deploy-ns
    waitFor: [ '-' ]
    args: [ 'apply',
            '--filename', './k8b/dev-ns.yaml',
            '--location', '${_REGION}',
            '--cluster', '${_CLUSTER}' ]

  # prepare k8b configs
  - name: 'gcr.io/cloud-builders/gke-deploy'
    id: prepareDB-secrets
    waitFor: [ '-' ]
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        envsubst < ./k8b/db/pg-deploy.yaml >> ./k8b/db/pg-deploy2.yaml; mv ./k8b/db/pg-deploy2.yaml ./k8b/db/pg-deploy.yaml
    secretEnv: [ 'DBNAME', 'DBUSERNAME', 'DBPASS' ]

  #   Kubernetes RUN DB
  - name: 'gcr.io/cloud-builders/gke-deploy'
    id: deploy-db
    waitFor: [ 'prepareDB-secrets', 'deploy-ns' ]
    args: [ 'apply',
            '--filename', './k8b/db/',
            '--location', '${_REGION}',
            '--cluster', '${_CLUSTER}' ]

  # Test DB in pod
  - name: 'gcr.io/cloud-builders/gke-deploy'
    id: test-db
    waitFor: [ 'deploy-db' ]
    entrypoint: 'bash'
    args: [ './scripts/test_db.sh' ]
    secretEnv: [ 'DBNAME', 'DBUSERNAME' ]


  # prepare k8b REST configs
  - name: 'gcr.io/cloud-builders/gke-deploy'
    id: prepare-REST-secrets
    waitFor: [ '-' ]
    entrypoint: 'bash'
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        envsubst < ./k8b/rest/rest-deploy.yaml >> ./k8b/rest/rest-deploy2.yaml; mv ./k8b/rest/rest-deploy2.yaml ./k8b/rest/rest-deploy.yaml
    secretEnv: [ 'DBNAME', 'DBUSERNAME', 'DBPASS' ]

  # Deploy REST-API
  - name: 'gcr.io/cloud-builders/gke-deploy'
    id: deploy-rest
    waitFor:
      - 'prepare-REST-secrets'
      - 'test-db'
    args: [ 'run',
            '--filename', './k8b/rest/',
            '--location', '${_REGION}',
            '--cluster', '${_CLUSTER}' ]

  # GET external ip for tests
  - name: 'gcr.io/cloud-builders/gke-deploy'
    id: get-ip
    waitFor:
      - 'deploy-rest'
    entrypoint: 'bash'
    args: [ './get_ip.sh' ]
    dir: 'scripts'


  # Test REST-API
  - name: 'badouralix/curl-jq:debian'
    id: test-REST-API
    waitFor:
      - 'get-ip'
    entrypoint: 'bash'
    args: [ './test_rest_api.sh' ]
    dir: 'scripts'

  # Delete REST-API from GKE
  - name: 'gcr.io/cloud-builders/gke-deploy'
    id: K8B-delete-REST-API
    waitFor: [ 'test-REST-API' ]
    entrypoint: 'kubectl'
    args: [ 'delete',
            '--filename', './k8b/rest/' ]

  # Delete Db from cluster
  - name: 'gcr.io/cloud-builders/gke-deploy'
    id: K8B-delete-postgres
    waitFor: [ 'test-REST-API' ]
    entrypoint: 'kubectl'
    args: [ 'delete',
            '--filename', './k8b/db/' ]

  #   delete the namespace
  - name: 'gcr.io/cloud-builders/gke-deploy'
    id: delete-ns
    waitFor: [ 'test-REST-API' ]
    entrypoint: 'kubectl'
    args: [ 'delete',
            '--filename', './k8b/dev-ns.yaml' ]
