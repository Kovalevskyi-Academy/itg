openapi: 3.0.3
info:
  title: Interactive Text Games
  description: Here you can interact with interactive text games through HTTP requests.
  termsOfService: https://docs.google.com/document/d/1ckahubIW_SVBNAnv93yaYD75iNJW3b6BHZ1Sigx7vDo/
  license:
    name: MIT
    url: https://github.com/Kovalevskyi-Academy/itg/blob/main/LICENSE
  version: 1.0.0

servers:
  - url: https://{environment}.textify.me/v1
    description: Online servers.
    variables:
      environment:
        default: api
        enum:
          - api # Production server
          - dev.api # Developer server
  - url: http://localhost:8080
    description: Only for local testing when run `make -f textify.mk up` in root project's folder.

paths:
  /nodes:
    parameters:
      - name: storyUuid
        in: path
        required: true
        description: Unique identifier of some story.
        schema:
          $ref: './schemas/story.json#/properties/storyUuid'
    post:
      tags:
        - node
      summary: Create one unique node.
      requestBody:
        description: Take **node** object from JSON & create unique record in DB. Should be input node's uuid `-1`?
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/node.json'
      responses:
        '201':
          description: Node created. **Returning** UUID.
          content:
            application/json:
              schema:
                $ref: './schemas/node.json#/properties/nodeUuid'
        '4XX':
          description: Any problems with creating record in DB.
          content:
            application/json:
              schema:
                $ref: './schemas/requestError.json'
              example:
                message: Yur node-object is broken!
        '5XX':
          description: Some unexpected error
          content:
            application/json:
              schema:
                $ref: './schemas/requestError.json'
              example:
                message: It's an magic error! Perhaps Merlin can help.


  # А что если не задавать айдишник истории? Ведь он и так храниться в каждой ноде...
  # Или, как я помню, нужно выпилить привязку ноды к истории в самой ноде, а нужно просто
  # для каждой истории создавать свою таблицу с нодами?
  /nodes/{nodeUuid}:
    parameters:
      - name: storyUuid
        in: path
        required: true
        description: Unique identifier of some story.
        schema:
          $ref: './schemas/story.json#/properties/storyUuid'
      - name: nodeUuid
        in: path
        required: true
        description: Unique identifier of some node.
        schema:
          $ref: './schemas/node.json#/properties/nodeUuid'
    get:
      tags:
        - node
      summary: Get one specified node from the specified story.
      responses:
        '200':
          description: Only if this specified node is present in specified story.
          content:
            application/json:
              schema:
                $ref: './schemas/node.json'
        '404':
          description: There is no node with the specified UUID.
          content:
            application/json:
              schema:
                $ref: './schemas/requestError.json'
              example:
                message: Yur node-object not found!
    delete:
      tags:
        - node
      summary: Deletes specified node from specified specified story.
      responses:
        '200':
          description: Story removed!
        '404':
          description: If story or node not found.
          content:
            application/json:
              schema:
                $ref: './schemas/requestError.json'
              examples:
                storyNotFound:
                  value:
                    message: Requested story not found.
                nodeNotFound:
                  value:
                    message: Requested node not found.

  /stories:
    post:
      tags:
        - story
      summary: Create one unique story.
      requestBody:
        description: Take **story** object from JSON & create unique record in DB. Should be input story's uuid `-1`?
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/story.json'
      responses:
        '201':
          description: Story created. **Returning** UUID.
          content:
            application/json:
              schema:
                $ref: './schemas/story.json#/properties/storyUuid'
        '4XX':
          description: Any problems with creating record in DB.
          content:
            application/json:
              schema:
                $ref: './schemas/requestError.json'
              example:
                message: Yur story-object is broken!
        '5XX':
          description: Some unexpected error
          content:
            application/json:
              schema:
                $ref: './schemas/requestError.json'
              example:
                message: It's an magic error! Perhaps Merlin can help.

    get:
      tags:
        - story
      summary: Returns a list of all stories.
      description: List contains som information about each story.
      responses:
        '200':
          description: The answer is an array, each element of which is a dataset of any available story.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    storyUuid:
                      $ref: './schemas/story.json#/properties/storyUuid'
                    storyTitle:
                      $ref: './schemas/story.json#/properties/storyTitle'
                    storyDescription:
                      $ref: './schemas/story.json#/properties/storyDescription'
                    storyAuthors:
                      $ref: './schemas/story.json#/properties/authors'

  # Мы будем использовать и Path Parameters и Query Parameters
  # читаем тут: https://swagger.io/docs/specification/describing-parameters/
  /stories/{storyUuid}:
    parameters:
      - name: storyUuid
        in: path
        required: true
        description: Unique identifier of some story.
        schema:
          $ref: './schemas/story.json#/properties/storyUuid'
    get:
      tags:
        - story
      summary: Get a only one full story object.
      responses:
        '200':
          description: The story being returned
          content:
            application/json:
              schema:
                $ref: './schemas/story.json'
        '404':
          description: There is no story with the specified UUID.
          content:
            application/json:
              schema:
                $ref: './schemas/requestError.json'
    patch:
      tags:
        - story
      summary: Modify existing story.
      description: In the **future**, we must learn to modify existing history.
      requestBody:
        description: Contains any parameters of story.
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: './schemas/story.json'
                - $ref: './schemas/story.json#/properties/authors'
      responses:
        '501':
          description: Not supported yet.

    delete:
      tags:
        - story
      summary: Deletes the story and the chain of all nodes of the specified story.
      responses:
        '200':
          description: Story removed!


