openapi: 3.0.3
info:
  title: Interactive Text Games
  description: Here you can interact with interactive text games through HTTP requests.
  termsOfService: https://docs.google.com/document/d/1ckahubIW_SVBNAnv93yaYD75iNJW3b6BHZ1Sigx7vDo/
  license:
    name: MIT
    url: https://github.com/Kovalevskyi-Academy/itg/blob/main/LICENSE
  version: 1.0.0

servers:
  - url: https://{environment}.textify.me/v1
    variables:
      environment:
        default: api # Production server
        enum:
          - api
          - dev.api

paths:
  /stories:
    post:
      tags:
        - story
      summary: Create one unique story.
      requestBody:
        description: Take **story** object from JSON & create unique record in DB. Input story's uuid should be `-1`.
        required: true
        content:
          application/json:
            schema:
              $ref: '../schemas/story.json'
      responses:
        201:
          description: Story created. **Returning** UUID.
          content:
            application/json:
              schema:
                $ref: '../schemas/story.json#/properties/storyUuid'
        4XX:
          description: Any problems with creating record in DB.
          content:
            application/json:
              schema:
                $ref: '../schemas/Error.json'
              example:
                message: Yur story-object is broken!
        5XX:
          description: Some unexpected error
          content:
            application/json:
              schema:
                $ref: '../schemas/Error.json'
              example:
                message: It's an magic error! Perhaps Merlin can help.

    get:
      tags:
        - story
      summary: Returns a list of all stories.
      description: List contains som information about each story.
      responses:
        200:
          description: The answer is an array, each element of which is a dataset of any available story.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    storyUuid:
                      $ref: '../schemas/story.json#/properties/storyUuid'
                    storyTitle:
                      $ref: '../schemas/story.json#/properties/storyTitle'
                    storyDescription:
                      $ref: '../schemas/story.json#/properties/storyDescription'
                    storyAuthor:
                      $ref: '../schemas/story.json#/$defs/metadata/properties/storyAuthor'

  /stories/{storyUuid}:
    parameters:
      - name: storyUuid
        in: path
        required: true
        description: Unique identifier of some story.
        schema:
          $ref: '../schemas/story.json#/properties/storyUuid'
    get:
      tags:
        - story
      summary: Get a only one full story object.
      responses:
        200:
          description: The story being returned
          content:
            application/json:
              schema:
                $ref: '../schemas/story.json'
        404:
          description: There is no story with the specified UUID.
          content:
            application/json:
              schema:
                $ref: '../schemas/Error.json'
    patch:
      tags:
        - story
      summary: Modify existing story.
      description: In the **future**, we must learn to modify existing history.
      requestBody:
        description: Contains any parameters of story.
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '../schemas/story.json'
                - $ref: '../schemas/story.json#/$defs/metadata/properties/storyAuthor'
      responses:
        501:
          description: Not supported yet.

    delete:
      tags:
        - story
      summary: Deletes the story and the chain of all nodes of the specified story.
      responses:
        200:
          description: Story removed!



  /stories/{storyUuid}/nodes/{nodeUuid}:
    get:
      tags:
        - node
      summary: Get one specified node from the specified story.
      parameters:
        - name: storyUuid
          in: path
          required: true
          description: Unique identifier of some story.
          schema:
            $ref: '../schemas/uuid.json'
        - name: nodeUuid
          in: path
          required: true
          description: Unique identifier of specified node from the specified story.
          schema:
            $ref: '../schemas/uuid.json'
      responses:
        200:
          description: Only if this specified node is present in specified story.
          content:
            application/json:
              schema:
                $ref: '../schemas/node.json'
        404:
          description: There is no node with the specified UUID.
          content:
            application/json:
              schema:
                $ref: '../schemas/Error.json'
